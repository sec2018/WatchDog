<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"  
    default-lazy-init="true">  

    <description>Shiro Configuration</description>  

    <!-- Shiro's main business-tier object for web-enabled applications -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
    <!-- 指定Shiro验证用户登录的类为自定义的Realm（若有多个Realm，可使用[realms]属性代替） -->
        <property name="realm">
        	<bean id="myShiroRealm" class="com.watchdog.shiro.MyShiroRealm">  
		        <property name="authorizationCachingEnabled" value="false"/>
		    </bean>
        </property>
        <!-- <property name="cacheManager" ref="cacheManager" /> --> 
        <!--
        Shiro默认会使用Servlet容器的Session，此时修改超时时间的话，可以修改web.xml或者这里自定义的MyRealm
        而若想使用Shiro原生Session则可以设置sessionMode属性为native，此时修改超时时间则只能修改MyRealm
        -->
        <!-- <property name="sessionMode" value="native"/> -->
    </bean>  

    <!-- 項目自定义的Realm -->  
    <!-- <bean id="myShiroRealm" class="com.watchdog.shiro.MyShiroRealm">  
        <property name="authorizationCachingEnabled" value="false"/>
    </bean>  --> 

	<!-- Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，并且Shiro对基于Spring的Web应用提供了完美的支持 -->
    <!-- Shiro Filter -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <property name="securityManager" ref="securityManager" />  
         <property name="loginUrl" value="/" />  
        <property name="unauthorizedUrl" value="/error.jsp" /> 
        <property name="filterChainDefinitions">  
            <value>  
                /index/index.jsp = authc   
                /login.jsp = anon 
                /** = authc  
            </value>  
        </property>  
    </bean>  

    <!-- 用户授权信息Cache -->  
    <!--  <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />  -->
    
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />  
	<!--
	    开启Shiro的注解（比如@RequiresRoles、@RequiresPermissions）
	    配置以下两个bean即可实现此功能（其需借助SpringAOP扫描使用Shiro注解的类，并在必要时进行安全逻辑验证）
	    并且：Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run
	    说明：本例并未使用Shiro注解，个人觉得将权限通过注解的方式硬编码在程序中，查看起来不是很方便      -->
    
    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>-->
    <!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager" />  
    </bean>    -->

</beans>  